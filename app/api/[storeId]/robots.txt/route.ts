import { type NextRequest, NextResponse } from "next/server"
import { db } from "@/lib/firebase/admin"

export async function GET(request: NextRequest, { params }: { params: { storeId: string } }) {
  try {
    const storeId = params.storeId

    // Get robots.txt configuration
    const robotsRef = db.collection("stores").doc(storeId).collection("settings").doc("robotsTxt")
    const robotsDoc = await robotsRef.get()

    if (!robotsDoc.exists) {
      return new NextResponse("Robots.txt configuration not found", { status: 404 })
    }

    const config = robotsDoc.data()

    // Build robots.txt content
    let content = "# Generated by NRSTbuild\n"
    content += "User-agent: *\n"

    if (config.allowAll) {
      content += "Allow: /\n"
    } else {
      // Add disallow paths
      if (config.disallowPaths && config.disallowPaths.length > 0) {
        for (const path of config.disallowPaths) {
          content += `Disallow: ${path}\n`
        }
      }
    }

    // Add sitemap URL if available
    if (config.sitemapUrl) {
      content += `\nSitemap: ${config.sitemapUrl}\n`
    }

    // Add custom rules
    if (config.customRules && config.customRules.length > 0) {
      content += "\n# Custom rules\n"
      for (const rule of config.customRules) {
        content += `${rule}\n`
      }
    }

    // Update last updated timestamp
    await robotsRef.update({
      lastUpdated: new Date(),
    })

    return new NextResponse(content, {
      headers: {
        "Content-Type": "text/plain",
        "Cache-Control": "public, max-age=86400, s-maxage=86400",
      },
    })
  } catch (error) {
    console.error("Error generating robots.txt:", error)
    return new NextResponse("Error generating robots.txt", { status: 500 })
  }
}

